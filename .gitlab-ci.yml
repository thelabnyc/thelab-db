stages:
  - lint
  - test
  - docs
  - release

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/poetry"
  PYIMAGE: py311

.rules_mrs_and_protected:
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  - if: $CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true"
  - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

.rules_only_mrs:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

.rules_only_master:
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true"

.rules_only_protected_tags:
  - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"

.needs_all_tests:
  - precommit
  - test:sqlite
  - test:postgres

.script_build_docs:
  - make docs

.base_job: &base_job
  image: "registry.gitlab.com/thelabnyc/python:${PYIMAGE}"

.dev_dependency_job: &dev_dependency_job
  <<: *base_job
  before_script:
    # Setup Poetry to allow caching between jobs
    - poetry config cache-dir $POETRY_CACHE_DIR
    - poetry config virtualenvs.create true
    - poetry config virtualenvs.in-project true
    # Install dependencies
    - poetry install
  cache:
    key: devdependencies-${PYIMAGE}
    paths:
      - .cache/pip/
      - .cache/poetry/
      - .venv/

.release_job: &release_job
  rules:
    - !reference [.rules_only_protected_tags]
  stage: release
  needs:
    - !reference [.needs_all_tests]

precommit:
  rules:
    - !reference [.rules_mrs_and_protected]
  stage: lint
  needs: []
  image: registry.gitlab.com/thelabnyc/dind:latest
  variables:
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  script:
    - pip3 install pre-commit
    - pre-commit run --all-files
  cache:
    paths:
      - ${PRE_COMMIT_HOME}

test:sqlite: &test_sqlite
  <<: *dev_dependency_job
  rules:
    - !reference [.rules_mrs_and_protected]
  stage: test
  needs: []
  variables:
    DJANGO_SETTINGS_MODULE: thelabdb.tests.settings.sqlite
  parallel:
    matrix:
      - PYIMAGE: py310
        TOX_SKIP_ENV: "^(?!py310-)"
      - PYIMAGE: py311
        TOX_SKIP_ENV: "^(?!py311-)"
  script:
    - poetry run tox
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

test:postgres:
  <<: *test_sqlite
  variables:
    POSTGRES_DB: postgres
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: ""
    POSTGRES_HOST_AUTH_METHOD: 'trust'
    DJANGO_SETTINGS_MODULE: thelabdb.tests.settings.pg
  services:
    - postgres:latest

test:docs:
  <<: *dev_dependency_job
  rules:
    - !reference [.rules_only_mrs]
  stage: test
  needs: []
  script:
    - !reference [.script_build_docs]

pages:
  <<: *dev_dependency_job
  rules:
    - !reference [.rules_only_master]
  stage: docs
  needs:
    - !reference [.needs_all_tests]
  script:
    - !reference [.script_build_docs]
  artifacts:
    paths:
      - public

release:pkg:
  <<: *base_job
  <<: *release_job
  script:
    - pip install twine
    # Build package
    - poetry build
    # Publish to Gitlab's package registry
    - export TWINE_USERNAME=gitlab-ci-token
    - export TWINE_PASSWORD=${CI_JOB_TOKEN}
    - python -m twine upload
      --repository-url https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi
      dist/*

release:gitlab:
  <<: *release_job
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo 'noop'
  release:
    name: "Release $CI_COMMIT_TAG"
    description: "Release $CI_COMMIT_TAG. Tagged by $GITLAB_USER_LOGIN"
    tag_name: "$CI_COMMIT_TAG"
    ref: "$CI_COMMIT_TAG"
